#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <AVRXlib/AVRXClocks.h>
#include <AVRXlib/AVRXSerial.h>


volatile XUSARTst TTYC0;

ISR(USARTC0_RXC_vect)
{
	Rx_Handler(&TTYC0);
}

ISR(USARTC0_TXC_vect)
{
	Tx_Handler(&TTYC0);
}


int main(void)
{
	unsigned long sClk, pClk;

	cli();

	SetSystemClock(CLK_SCLKSEL_RC32M_gc, CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc);

	GetSystemClocks(&sClk, &pClk);

	USART_init(&TTYC0, 0xC0, pClk, (_USART_TXCIL_LO | _USART_RXCIL_LO), 576, -4,
			_USART_CHSZ_8BIT, _USART_PM_DISABLED, _USART_SM_1BIT);

	USART_buffer_init(&TTYC0, 160, 80);

	TTYC0.fInMode = _INPUT_CR | _INPUT_ECHO | _INPUT_TTY;
	TTYC0.fOutMode = _OUTPUT_CRLF;

	USART_enable(&TTYC0, (USART_TXEN_bm | USART_RXEN_bm));

	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;

	sei();
    
//	PORTC_DIR |= 0x03;      // 
//	PORTC_OUT &= 0xFE;		// turn off PC0 to enable transceiver - specific to XPlore board
//	PORTC_OUT |= 0x02;		// turn on PC1 to take transceiver out of shutdown mode

    USART_send(&TTYC0, "howdy");
    
	while (1) {
	}
}
